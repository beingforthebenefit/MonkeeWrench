name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Lint
        run: npm run lint

      - name: Test (with coverage)
        run: |
          npm run test:coverage | tee vitest-output.txt
          test ${PIPESTATUS[0]} -eq 0

      - name: Publish summary
        if: always()
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          # Grep key lines from Vitest output for quick glance
          grep -E "^Tests\s+" vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          grep -E "^Test Files\s+" vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          echo >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Raw Vitest Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '```text' >> $GITHUB_STEP_SUMMARY
          tail -n 200 vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage

      - name: Generate tests badge JSON
        if: always()
        run: |
          line=$(grep -E "^Tests\s+" vitest-output.txt | tail -n1 || true)
          passed=$(echo "$line" | grep -oE "[0-9]+ passed" | awk '{print $1}')
          failed=$(echo "$line" | grep -oE "[0-9]+ failed" | awk '{print $1}')
          skipped=$(echo "$line" | grep -oE "[0-9]+ skipped" | awk '{print $1}')
          total=$(( (${passed:-0}) + (${failed:-0}) + (${skipped:-0}) ))
          color=brightgreen && [ "${failed:-0}" -gt 0 ] && color=red
          mkdir -p badges
          cat > badges/tests.json <<EOF
          {"schemaVersion":1, "label":"tests", "message":"${passed:-0} passed, ${failed:-0} failed", "color":"$color"}
          EOF

      - name: Commit badge
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore(ci): update tests badge'
          file_pattern: badges/tests.json
