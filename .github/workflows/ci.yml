name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

# Needed for committing badges and deploying GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # Keep least privilege at job scope if you prefer
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Lint
        run: npm run lint

      - name: Test (with coverage)
        run: |
          npm run test:coverage | tee vitest-output.txt
          test ${PIPESTATUS[0]} -eq 0

      - name: Publish summary
        if: always()
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          # Grep key lines from Vitest output for quick glance (tolerate ANSI + leading spaces)
          grep -E "Tests[[:space:]]+[0-9]+[[:space:]]+passed" vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          grep -E "Test Files[[:space:]]+[0-9]+[[:space:]]+passed" vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          echo >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Raw Vitest Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '```text' >> $GITHUB_STEP_SUMMARY
          tail -n 200 vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Generate badges JSON
        if: always()
        run: |
          set -euo pipefail
          # Strip ANSI escape codes to make parsing robust
          perl -pe 's/\e\[[\d;]*[A-Za-z]//g' vitest-output.txt | tr -d '\r' > vitest-output.clean.txt || true
          # Extract the summary line regardless of indent
          line=$(grep -E "^[[:space:]]*Tests[[:space:]]+[0-9]+[[:space:]]+passed" vitest-output.clean.txt | tail -n1 || true)
          # Parse counts robustly; sed returns success even if no match
          passed=$(sed -n 's/.*\([0-9][0-9]*\) passed.*/\1/p' <<<"$line" | head -n1)
          failed=$(sed -n 's/.*\([0-9][0-9]*\) failed.*/\1/p' <<<"$line" | head -n1)
          skipped=$(sed -n 's/.*\([0-9][0-9]*\) skipped.*/\1/p' <<<"$line" | head -n1)
          # Default to 0 if empty
          [ -n "${passed:-}" ] || passed=0
          [ -n "${failed:-}" ] || failed=0
          [ -n "${skipped:-}" ] || skipped=0
          if [ "$failed" -gt 0 ]; then color=red; elif [ "$passed" -gt 0 ]; then color=brightgreen; else color=lightgrey; fi
          mkdir -p badges
          cat > badges/tests.json <<EOF
          {"schemaVersion":1, "label":"tests", "message":"${passed} passed, ${failed} failed", "color":"$color"}
          EOF

          # Coverage badge from the "All files" line in vitest text report
          cov_line=$(grep -E "^[[:space:]]*All files[[:space:]]*\|" vitest-output.txt | head -n1 || true)
          cov_raw=$(awk -F'\|' '{gsub(/[[:space:]]/,"",$2); print $2}' <<<"$cov_line" | head -n1)
          [ -n "${cov_raw:-}" ] || cov_raw=0
          cov_int=$(echo "$cov_raw" | awk '{printf("%.0f", $1)}')
          if [ "$cov_int" -ge 90 ]; then color_cov=brightgreen;
          elif [ "$cov_int" -ge 80 ]; then color_cov=yellowgreen;
          elif [ "$cov_int" -ge 70 ]; then color_cov=yellow;
          elif [ "$cov_int" -ge 50 ]; then color_cov=orange;
          else color_cov=red; fi
          cat > badges/coverage.json <<EOF
          {"schemaVersion":1, "label":"coverage", "message":"${cov_int}%", "color":"$color_cov"}
          EOF

      # Only attempt to commit on pushes to main. PRs (esp. from forks) lack write perms.
      - name: Commit badges (to badges branch)
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore(ci): update test/coverage badges'
          file_pattern: badges/*.json
          branch: badges
          create_branch: true
          push_options: '--force-with-lease'

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage

      - name: Upload coverage to Pages artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage
          name: github-pages

  publish-coverage:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
