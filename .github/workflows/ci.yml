name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

# Needed so the workflow can push the generated badge JSON back to the repo
permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # Keep least privilege at job scope if you prefer
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Lint
        run: npm run lint

      - name: Test (with coverage)
        run: |
          npm run test:coverage | tee vitest-output.txt
          test ${PIPESTATUS[0]} -eq 0

      - name: Publish summary
        if: always()
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          # Grep key lines from Vitest output for quick glance (tolerate ANSI + leading spaces)
          grep -E "Tests[[:space:]]+[0-9]+[[:space:]]+passed" vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          grep -E "Test Files[[:space:]]+[0-9]+[[:space:]]+passed" vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          echo >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Raw Vitest Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '```text' >> $GITHUB_STEP_SUMMARY
          tail -n 200 vitest-output.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Generate tests badge JSON
        if: always()
        run: |
          set -euo pipefail
          # Extract the summary line regardless of ANSI/indent
          line=$(grep -E "Tests[[:space:]]+[0-9]+[[:space:]]+passed" vitest-output.txt | tail -n1 || true)
          # Parse counts robustly; sed returns success even if no match
          passed=$(sed -n 's/.*\([0-9][0-9]*\) passed.*/\1/p' <<<"$line" | head -n1)
          failed=$(sed -n 's/.*\([0-9][0-9]*\) failed.*/\1/p' <<<"$line" | head -n1)
          skipped=$(sed -n 's/.*\([0-9][0-9]*\) skipped.*/\1/p' <<<"$line" | head -n1)
          # Default to 0 if empty
          [ -n "${passed:-}" ] || passed=0
          [ -n "${failed:-}" ] || failed=0
          [ -n "${skipped:-}" ] || skipped=0
          if [ "$failed" -gt 0 ]; then color=red; elif [ "$passed" -gt 0 ]; then color=brightgreen; else color=lightgrey; fi
          mkdir -p badges
          cat > badges/tests.json <<EOF
          {"schemaVersion":1, "label":"tests", "message":"${passed} passed, ${failed} failed", "color":"$color"}
          EOF

      # Only attempt to commit on pushes to main. PRs (esp. from forks) lack write perms.
      - name: Commit badge (to badges branch)
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore(ci): update tests badge'
          file_pattern: badges/tests.json
          branch: badges
          create_branch: true

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage
