generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProposalStatus {
  PENDING
  APPROVED
  ARCHIVED
}

enum AuditAction {
  PROPOSE
  VOTE
  UNVOTE
  ADMIN_EDIT
  ADMIN_DELETE
  ADMIN_ARCHIVE
  ADMIN_UNARCHIVE
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  proposals Proposal[]
  votes     Vote[]
}

model Proposal {
  id         String         @id @default(cuid())
  title      String
  artist     String
  chartUrl   String?
  lyricsUrl  String?
  youtubeUrl String?
  status     ProposalStatus @default(PENDING)
  proposer   User           @relation(fields: [proposerId], references: [id])
  proposerId String
  votes      Vote[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String
  createdAt  DateTime @default(now())

  @@unique([userId, proposalId])
}

model Settings {
  id              Int      @id @default(1)
  voteThreshold   Int      @default(2)
  adminAllowlist  String[] @db.Text
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String
  action    AuditAction
  targetId  String?
  createdAt DateTime    @default(now())
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}